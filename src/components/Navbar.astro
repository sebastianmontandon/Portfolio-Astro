---
const navItems = [
  { name: 'Home', href: '#hero' },
  { name: 'Projects', href: '#projects' },
  { name: 'About', href: '#about' },
  { name: 'Contact', href: '#contact' },
];
---

<header class="fixed w-full top-0 z-50 bg-dark-800/95 backdrop-blur-sm border-b border-dark-700">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <nav class="flex items-center justify-between h-14 md:h-16">
      <a href="#" class="flex items-center space-x-2 text-xl font-bold">
        <span class="text-primary-400 font-mono">&lt;/&gt;</span>
        <span>Dev<span class="text-primary-400">.</span></span>
      </a>
      
      <!-- Mobile menu button -->
      <button id="menu-toggle" class="md:hidden text-white">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
      
      <!-- Desktop menu -->
      <ul class="hidden md:flex items-center space-x-8">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href} 
              class="text-gray-300 hover:text-primary-400 transition duration-300"
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
  
  <!-- Mobile menu -->
  <div id="mobile-menu" class="md:hidden hidden bg-dark-700 border-b border-dark-600">
    <div class="container mx-auto px-4 py-4">
      <ul class="flex flex-col space-y-4">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href} 
              class="block text-gray-300 hover:text-primary-400 transition duration-300"
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const navLinks = document.querySelectorAll('#mobile-menu a');
    const desktopNavLinks = document.querySelectorAll('[data-nav-link]');
    
    // Toggle mobile menu
    menuToggle?.addEventListener('click', () => {
      const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
      menuToggle.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu?.classList.toggle('hidden');
      
      // Animate menu icon
      menuToggle.classList.toggle('active');
    });
    
    // Close mobile menu when clicking on a link
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        menuToggle?.setAttribute('aria-expanded', 'false');
        menuToggle?.classList.remove('active');
      });
    });
    
    // Add active state to current section in viewport
    const handleScroll = () => {
      const scrollPosition = window.scrollY + 100;
      
      document.querySelectorAll('section[id]').forEach((section: Element) => {
        const sectionEl = section as HTMLElement;
        const sectionTop = sectionEl.offsetTop;
        const sectionHeight = sectionEl.offsetHeight;
        const sectionId = section.getAttribute('id');
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          desktopNavLinks.forEach(link => {
            if (!link) return;
            
            const href = link.getAttribute('href');
            const lastSpan = link.querySelector('span:last-child') as HTMLElement;
            
            if (href === `#${sectionId}`) {
              link.classList.add('text-white');
              if (lastSpan) {
                lastSpan.classList.add('w-full');
              }
            } else {
              link.classList.remove('text-white');
              if (lastSpan) {
                lastSpan.classList.remove('w-full');
              }
            }
          });
        }
      });
    };
    
    // Run once on page load
    handleScroll();
    
    // Add scroll event listener
    window.addEventListener('scroll', handleScroll);
    
    // Cleanup
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  });
</script>

<style>
  /* Menu button animation */
  #menu-toggle.active svg {
    transform: rotate(90deg);
  }
  
  #menu-toggle svg {
    transition: transform 0.3s ease-in-out;
  }
  
  /* Smooth scroll for anchor links */
  html {
    scroll-behavior: smooth;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #1a1a1a;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #00c2b8;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #00a39b;
  }
</style>