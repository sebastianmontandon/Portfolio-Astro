---
const navItems = [
  { name: 'Home', href: '#hero' },
  { name: 'Projects', href: '#projects' },
  { name: 'About', href: '#about' },
  { name: 'Contact', href: '#contact' },
];
---

<header class="fixed top-0 left-0 right-0 z-50 px-2 py-2 mt-5">
  <div class="max-w-7xl mx-auto">
    <nav class="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 hover:bg-gray-800/70 transition-all duration-300 flex items-center justify-between" role="navigation" aria-label="Main navigation">
      <!-- Logo/Name -->
      <div class="text-xl font-bold gradient-text">
        <a href="#hero" class="rounded">
          &lt; sebastianmontandon.dev /&gt;
        </a>
      </div>

      <!-- Desktop Navigation -->
      <ul class="hidden md:flex items-center gap-2" role="menubar">
        {navItems.map(item => (
          <li role="none">
            <a
              href={item.href}
              class="text-gray-300 no-underline hover:text-purple-400 rounded-xl px-4 py-2 transition-colors duration-300 relative group"
              role="menuitem"
            >
              {item.name}
              <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-purple-400 transition-all duration-300 group-hover:w-full"></span>
            </a>
          </li>
        ))}
      </ul>

      <!-- Mobile Menu Button -->
      <button
        id="menu-toggle"
        class="md:hidden text-gray-300 hover:text-purple-400 rounded-xl p-2 transition-colors duration-300"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Toggle mobile menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </nav>

    <!-- Mobile Navigation -->
    <nav id="mobile-menu" class="md:hidden hidden mt-4 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 hover:bg-gray-800/70 transition-all duration-300 animate-fade-in" aria-label="Mobile navigation">
      <ul class="flex flex-col gap-2" role="menu">
        {navItems.map(item => (
          <li role="none">
            <a
              href={item.href}
              class="text-gray-300 hover:text-purple-400 rounded-xl px-4 py-3 transition-colors duration-300 text-left block"
              role="menuitem"
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileNavLinks = document.querySelectorAll('#mobile-menu a');
    const desktopNavLinks = document.querySelectorAll('nav ul[role="menubar"] a');
    
    // Toggle mobile menu
    menuToggle?.addEventListener('click', () => {
      const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
      menuToggle.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu?.classList.toggle('hidden');
      
      // Animate menu icon
      menuToggle.classList.toggle('active');
    });
    
    // Close mobile menu when clicking on a mobile link
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        // Close mobile menu
        mobileMenu?.classList.add('hidden');
        menuToggle?.setAttribute('aria-expanded', 'false');
        menuToggle?.classList.remove('active');
      });
    });
    
    // Add active state to current section in viewport
    const handleScroll = () => {
      const scrollPosition = window.scrollY + 100;
      
      document.querySelectorAll('section[id]').forEach((section) => {
        const sectionEl = section as HTMLElement;
        const sectionTop = sectionEl.offsetTop;
        const sectionHeight = sectionEl.offsetHeight;
        const sectionId = section.getAttribute('id');
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          desktopNavLinks.forEach(link => {
            const href = link.getAttribute('href');
            const lastSpan = link.querySelector('span:last-child') as HTMLElement;
            
            if (href === `#${sectionId}`) {
              link.classList.add('text-purple-400');
              if (lastSpan) {
                lastSpan.classList.add('w-full');
              }
            } else {
              link.classList.remove('text-purple-400');
              if (lastSpan) {
                lastSpan.classList.remove('w-full');
              }
            }
          });
        }
      });
    };
    
    // Run once on page load
    handleScroll();
    
    // Add scroll event listener with throttling
    let ticking = false;
    const throttledScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };
    
    window.addEventListener('scroll', throttledScroll);
    
    // Cleanup
    return () => {
      window.removeEventListener('scroll', throttledScroll);
    };
  });
</script>

<style>
  /* Menu button animation */
  #menu-toggle.active svg {
    transform: rotate(90deg);
  }
  
  #menu-toggle svg {
    transition: transform 0.3s ease-in-out;
  }
  
  /* Focus styles for better accessibility */
  /* Removed focus outline styles for navbar elements */
</style>