---
// Import types and utilities
import type { Project } from '../types';
import ProjectModal from './ProjectModal.astro';

// Debug environment variables
console.log('Environment in Projects.astro:', {
  PUBLIC_SUPABASE_URL: import.meta.env.PUBLIC_SUPABASE_URL,
  PUBLIC_SITE_URL: import.meta.env.PUBLIC_SITE_URL,
  MODE: import.meta.env.MODE,
  NODE_ENV: import.meta.env.MODE // In Astro, use MODE instead of NODE_ENV
});

// Define the API response type
interface ProjectsApiResponse {
  success: boolean;
  data: Project[];
  error?: string;
}

// Initialize empty projects array with proper typing
let projects: Project[] = [];
let categories: string[] = [];

// Función para obtener proyectos desde la API
async function fetchProjects(): Promise<Project[]> {
  try {
    const baseUrl = import.meta.env.PUBLIC_SITE_URL || 'http://localhost:4321';
    const apiUrl = `${baseUrl}/api/projects`;
    
    console.log('Fetching projects from:', apiUrl);
    
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log('API Response:', result);
    
    // Manejar el formato de respuesta de la API
    if (result && result.success && Array.isArray(result.data)) {
      console.log(`Found ${result.data.length} projects in API response`);
      return result.data;
    } else if (Array.isArray(result)) {
      // Si la respuesta es directamente un array
      console.log(`Found ${result.length} projects in direct array response`);
      return result;
    } else {
      console.warn('Unexpected API response format:', result);
      return [];
    }
  } catch (error) {
    console.error('Error in fetchProjects:', error);
    return [];
  }
}

// Obtener todos los proyectos
const allProjects = await fetchProjects();

// Obtener categorías únicas de los proyectos
const projectCategories = [...new Set(allProjects.map(project => project.category))].filter((category): category is string => Boolean(category));

// Proyectos por defecto si no hay datos
const defaultProjects: Project[] = [
  {
    id: "1",
    title: "E-commerce Platform",
    description: "A full-stack e-commerce platform built with Node.js, React, and PostgreSQL. Features include user authentication, product management, shopping cart, and payment integration.",
    image_url: "/images/projects/store-site.png",
    technologies: ["Node.js", "React", "PostgreSQL", "Stripe"],
    github_url: "https://github.com/example/ecommerce",
    live_url: "https://ecommerce-demo.com",
    category: "Full Stack",
    is_featured: true,
    slug: "ecommerce-platform",
    content: "A comprehensive e-commerce solution with modern features.",
    demo_video_url: undefined,
    tags: ["ecommerce", "fullstack", "react"],
    featured_image: undefined,
    gallery: undefined,
    published: true,
    published_at: new Date().toISOString(),
    ai_assisted: false,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  },
  {
    id: "2", 
    title: "Task Management App",
    description: "A collaborative task management application with real-time updates, drag-and-drop functionality, and team collaboration features.",
    image_url: "/images/projects/csv2json.png",
    technologies: ["React", "Node.js", "Socket.io", "MongoDB"],
    github_url: "https://github.com/example/task-app",
    live_url: "https://task-app-demo.com",
    category: "Web App",
    is_featured: false,
    slug: "task-management-app",
    content: "A modern task management solution for teams.",
    demo_video_url: undefined,
    tags: ["productivity", "collaboration", "webapp"],
    featured_image: undefined,
    gallery: undefined,
    published: true,
    published_at: new Date().toISOString(),
    ai_assisted: false,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  },
  {
    id: "3",
    title: "Data Analytics Dashboard",
    description: "Interactive dashboard for visualizing business metrics and KPIs with real-time data updates and customizable charts.",
    image_url: "/images/projects/quiniela-app.png", 
    technologies: ["React", "D3.js", "Python", "FastAPI"],
    github_url: "https://github.com/example/dashboard",
    live_url: "https://dashboard-demo.com",
    category: "Data Science",
    is_featured: false,
    slug: "data-analytics-dashboard",
    content: "Advanced data visualization and analytics platform.",
    demo_video_url: undefined,
    tags: ["analytics", "dataviz", "dashboard"],
    featured_image: undefined,
    gallery: undefined,
    published: true,
    published_at: new Date().toISOString(),
    ai_assisted: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }
];

// Usar proyectos reales si están disponibles, sino usar los por defecto
const finalProjects = allProjects.length > 0 ? allProjects : defaultProjects;
const finalCategories = projectCategories.length > 0 ? projectCategories : [...new Set(defaultProjects.map(project => project.category))].filter((category): category is string => Boolean(category));

console.log(`Using ${finalProjects.length} projects with ${finalCategories.length} categories`);

// Function to safely truncate description
const truncate = (str: string = '', maxLength: number): string => 
  str.length > maxLength ? `${str.substring(0, maxLength)}...` : str;
---

<section id="projects" class="py-20 px-4 bg-gray-900">
  <div class="max-w-7xl mx-auto">
    <div class="bento-grid grid-cols-1 lg:grid-cols-12 gap-6 lg:gap-8">
      
      <!-- Header -->
      <div class="lg:col-span-12 bento-card animate-fade-in">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <h2 class="text-3xl font-bold gradient-text">Featured Projects</h2>
  </div>
    </div>
    
      <!-- Filter buttons -->
      <div class="lg:col-span-12 bento-card animate-slide-up">
        <div class="flex flex-col sm:flex-row items-center justify-between gap-6">
          <!-- Filter buttons with modern design -->
          <div class="flex flex-wrap gap-2">
            <button 
              class="filter-btn active px-6 py-3 rounded-xl text-sm font-medium transition-all duration-300 border-2"
              data-category="all"
            >
              <span class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                All Projects
              </span>
            </button>
            {finalCategories.map(category => (
              <button
                class="filter-btn px-6 py-3 rounded-xl text-sm font-medium transition-all duration-300 border-2"
                data-category={category.toLowerCase().replace(/\s+/g, '-')}
              >
                <span class="flex items-center gap-2">
                  <div class="w-2 h-2 rounded-full bg-current opacity-60"></div>
                  {category}
                </span>
              </button>
            ))}
          </div>

          <!-- Project counter -->
          <div class="flex items-center gap-4 text-sm text-gray-400">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
              <span id="project-counter">{finalProjects.length} Projects</span>
            </div>
            <div class="w-px h-4 bg-gray-700"></div>
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
              </svg>
              <span id="page-info">Page 1 of 1</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Projects grid -->
      <div class="lg:col-span-12">
        <div id="projects-container">
          {finalProjects.length > 0 ? (
            <div class="bento-grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {finalProjects.map((project, index) => (
                <div 
                  class="project-card bento-card animate-slide-up group cursor-pointer"
                  data-category={project.category?.toLowerCase().replace(/\s+/g, '-') || 'other'}
                  data-project={JSON.stringify(project)}
                  style={`animation-delay: ${index * 0.1}s`}
                  onclick="handleProjectClick(this)"
                >
                  <div class="relative overflow-hidden rounded-xl mb-4">
                  <img
                    src={project.image_url}
                    alt={project.title}
                      class="w-full h-48 object-cover group-hover:scale-110 transition-transform duration-500"
                    loading="lazy"
                  />
                    <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    
                    <!-- Project links -->
                    <div class="absolute top-4 right-4 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    {project.github_url && (
                      <a 
                        href={project.github_url}
                        target="_blank"
                        rel="noopener noreferrer"
                          class="w-10 h-10 bg-gray-900/90 backdrop-blur-sm rounded-xl flex items-center justify-center text-gray-300 hover:text-white transition-all duration-300 border border-white/20 hover:border-white/40 hover:scale-110 hover:shadow-lg group"
                          onclick="event.stopPropagation()"
                          aria-label="View source code"
                      >
                          <svg class="w-5 h-5 group-hover:scale-110 transition-transform duration-300" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                        </svg>
                      </a>
                    )}
                    {project.live_url && (
                      <a 
                        href={project.live_url}
                        target="_blank"
                        rel="noopener noreferrer"
                          class="w-10 h-10 bg-gradient-to-r from-purple-600/90 to-blue-600/90 backdrop-blur-sm rounded-xl flex items-center justify-center text-white hover:from-purple-500 hover:to-blue-500 transition-all duration-300 hover:scale-110 hover:shadow-lg group"
                          onclick="event.stopPropagation()"
                          aria-label="View live demo"
                      >
                          <svg class="w-5 h-5 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                      </a>
                    )}
                    </div>
                  </div>
                  
                  <div class="space-y-3">
                    <div class="flex items-center justify-between">
                      <h3 class="text-xl font-semibold text-gray-100 group-hover:text-white transition-colors duration-300">
                        {project.title}
                      </h3>
                      <span class="px-2 py-1 bg-purple-600/20 text-purple-300 rounded-lg text-xs font-medium">
                        {project.category || 'Other'}
                      </span>
                    </div>
                    
                    <p class="text-gray-400 text-sm leading-relaxed line-clamp-2">
                      {project.description}
                    </p>
                    
                    <div class="flex flex-wrap gap-2">
                      {project.technologies?.slice(0, 3).map(tech => (
                        <span class="px-2 py-1 bg-gray-700/50 text-gray-300 rounded-lg text-xs">
                          {tech}
                        </span>
                      ))}
                      {project.technologies && project.technologies.length > 3 && (
                        <span class="px-2 py-1 bg-gray-700/50 text-gray-400 rounded-lg text-xs">
                          +{project.technologies.length - 3} more
                    </span>
                  )}
                </div>
              </div>
            </div>
              ))}
            </div>
          ) : (
            <div class="bento-card text-center py-12">
              <div class="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold text-gray-100 mb-2">No Projects Found</h3>
              <p class="text-gray-400">Projects will appear here once they're added to the database.</p>
            </div>
          )}
        </div>

        <!-- Pagination Controls -->
        <div id="pagination-controls" class="lg:col-span-12 mt-8">
          <div class="flex flex-col sm:flex-row items-center justify-between gap-6">
            <!-- Page info -->
            <div class="flex items-center gap-4 text-sm text-gray-400">
              <div class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span id="pagination-info">Showing 1-6 of {finalProjects.length} projects</span>
              </div>
            </div>

            <!-- Pagination buttons -->
            <div class="flex items-center gap-2">
              <button 
                id="prev-page" 
                class="pagination-btn disabled:opacity-50 disabled:cursor-not-allowed px-4 py-2 rounded-xl text-sm font-medium transition-all duration-300 border-2"
                disabled
              >
                <span class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Previous
                </span>
              </button>
              
              <div id="page-numbers" class="flex items-center gap-1">
                <!-- Page numbers will be generated by JavaScript -->
              </div>
              
              <button 
                id="next-page" 
                class="pagination-btn px-4 py-2 rounded-xl text-sm font-medium transition-all duration-300 border-2"
              >
                <span class="flex items-center gap-2">
                  Next
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</section>

<!-- Project Modal -->
<ProjectModal />

<style>
  .filter-btn {
    @apply bg-gray-800/50 text-gray-300 hover:bg-gray-700/50 hover:text-white border-gray-700 hover:border-gray-600;
  }
  
  .filter-btn.active {
    @apply bg-gradient-to-r from-purple-600 to-blue-600 text-white border-purple-500 shadow-lg shadow-purple-500/25;
  }
  
  .project-card {
    @apply hover:scale-[1.02] hover:shadow-2xl transition-all duration-300;
  }

  .pagination-btn {
    @apply bg-gray-800/50 text-gray-300 hover:bg-gray-700/50 hover:text-white border-gray-700 hover:border-gray-600 hover:shadow-lg;
  }

  .pagination-btn.active {
    @apply bg-gradient-to-r from-purple-600 to-blue-600 text-white border-purple-500 shadow-lg shadow-purple-500/25;
  }

  .pagination-btn:disabled {
    @apply opacity-50 cursor-not-allowed hover:bg-gray-800/50 hover:text-gray-300 hover:border-gray-700;
  }

  @keyframes fadeIn {
    from { 
      opacity: 0; 
      transform: translateY(20px) scale(0.95); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0) scale(1); 
    }
  }

  @keyframes slideIn {
    from { 
      opacity: 0; 
      transform: translateX(-20px); 
    }
    to { 
      opacity: 1; 
      transform: translateX(0); 
    }
  }

  .filter-btn, .pagination-btn {
    @apply transform hover:scale-105 active:scale-95;
  }

  /* Smooth transitions for project cards */
  .project-card {
    @apply transition-all duration-500 ease-out;
  }

  .project-card:hover {
    @apply transform scale-[1.02] shadow-2xl;
  }

  /* Loading animation for pagination */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .loading {
    animation: pulse 1.5s ease-in-out infinite;
  }
</style>

<script>
  // Pagination state
  let currentPage = 1;
  let projectsPerPage = 6;
  let allProjects: HTMLElement[] = [];
  let filteredProjects: HTMLElement[] = [];
  let currentCategory: string = 'all';

  // Initialize pagination
  document.addEventListener('DOMContentLoaded', function() {
    // Get all project cards
    const projectCards = document.querySelectorAll('.project-card');
    allProjects = Array.from(projectCards).map(el => el as HTMLElement);
    filteredProjects = [...allProjects];
    
    // Initialize pagination
    updatePagination();
    displayProjects(); // Apply pagination immediately on load
    
    // Set up filter functionality
    setupFilters();
    
    // Set up pagination controls
    setupPaginationControls();
  });

  function setupFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach((button) => {
      button.addEventListener('click', function(this: HTMLElement) {
        const category = this.getAttribute('data-category') || 'all';
        
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Filter projects
        currentCategory = category;
        if (category === 'all') {
          filteredProjects = [...allProjects];
        } else {
          filteredProjects = allProjects.filter(card => {
            const cardElement = card as HTMLElement;
            const cardCategory = cardElement.getAttribute('data-category');
            return cardCategory === category;
          });
        }
        
        // Reset to first page and update display
        currentPage = 1;
        updatePagination();
        displayProjects();
      });
    });
  }

  function setupPaginationControls() {
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updatePagination();
          displayProjects();
          scrollToProjects();
        }
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(filteredProjects.length / projectsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          updatePagination();
          displayProjects();
          scrollToProjects();
        }
      });
    }
  }

  function scrollToProjects() {
    const projectsSection = document.getElementById('projects');
    if (projectsSection) {
      projectsSection.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  }

  function updatePagination() {
    const totalPages = Math.ceil(filteredProjects.length / projectsPerPage);
    const pageNumbersContainer = document.getElementById('page-numbers') as HTMLElement;
    const prevBtn = document.getElementById('prev-page') as HTMLButtonElement;
    const nextBtn = document.getElementById('next-page') as HTMLButtonElement;
    const pageInfo = document.getElementById('page-info') as HTMLElement;
    const paginationInfo = document.getElementById('pagination-info') as HTMLElement;
    const projectCounter = document.getElementById('project-counter') as HTMLElement;
    
    if (!pageNumbersContainer || !prevBtn || !nextBtn || !pageInfo || !paginationInfo || !projectCounter) return;
    
    // Update previous/next buttons
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;
    
    // Update page info
    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
    
    // Update pagination info
    const startIndex = (currentPage - 1) * projectsPerPage + 1;
    const endIndex = Math.min(currentPage * projectsPerPage, filteredProjects.length);
    paginationInfo.textContent = `Showing ${startIndex}-${endIndex} of ${filteredProjects.length} projects`;
    
    // Update project counter
    projectCounter.textContent = `${filteredProjects.length} Projects`;
    
    // Generate page numbers
    pageNumbersContainer.innerHTML = '';
    
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    // Add first page and ellipsis if needed
    if (startPage > 1) {
      const firstBtn = document.createElement('button');
      firstBtn.className = 'pagination-btn px-3 py-2 rounded-lg text-sm font-medium transition-all duration-300';
      firstBtn.textContent = '1';
      firstBtn.addEventListener('click', () => {
        currentPage = 1;
        updatePagination();
        displayProjects();
        scrollToProjects();
      });
      pageNumbersContainer.appendChild(firstBtn);
      
      if (startPage > 2) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'px-3 py-2 text-gray-400';
        ellipsis.textContent = '...';
        pageNumbersContainer.appendChild(ellipsis);
      }
    }
    
    // Add page numbers
    for (let i = startPage; i <= endPage; i++) {
      const pageBtn = document.createElement('button');
      pageBtn.className = `pagination-btn px-3 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${i === currentPage ? 'active' : ''}`;
      pageBtn.textContent = i.toString();
      pageBtn.addEventListener('click', () => {
        currentPage = i;
        updatePagination();
        displayProjects();
        scrollToProjects();
      });
      pageNumbersContainer.appendChild(pageBtn);
    }
    
    // Add last page and ellipsis if needed
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'px-3 py-2 text-gray-400';
        ellipsis.textContent = '...';
        pageNumbersContainer.appendChild(ellipsis);
      }
      
      const lastBtn = document.createElement('button');
      lastBtn.className = 'pagination-btn px-3 py-2 rounded-lg text-sm font-medium transition-all duration-300';
      lastBtn.textContent = totalPages.toString();
      lastBtn.addEventListener('click', () => {
        currentPage = totalPages;
        updatePagination();
        displayProjects();
        scrollToProjects();
      });
      pageNumbersContainer.appendChild(lastBtn);
    }
  }

  function displayProjects() {
    const startIndex = (currentPage - 1) * projectsPerPage;
    const endIndex = startIndex + projectsPerPage;
    const projectsToShow = filteredProjects.slice(startIndex, endIndex);
    
    // Hide all projects with animation
    allProjects.forEach((card, index) => {
      const cardElement = card as HTMLElement;
      cardElement.style.display = 'none';
      cardElement.style.animation = '';
    });
    
    // Show only projects for current page with staggered animation
    projectsToShow.forEach((card, index) => {
      const cardElement = card as HTMLElement;
      cardElement.style.display = 'block';
      cardElement.style.animation = `fadeIn 0.6s ease-out ${index * 0.1}s forwards`;
    });
  }
  
  // Project card click handler
  (window as any).handleProjectClick = function(element: HTMLElement) {
    try {
      const projectData = element.getAttribute('data-project');
      if (projectData) {
        const project = JSON.parse(projectData);
        // Use the global openProjectModal function from the modal component
        if ((window as any).openProjectModal) {
          (window as any).openProjectModal(project);
        } else {
          console.warn('Modal not available yet');
        }
      }
    } catch (error) {
      console.error('Error opening project modal:', error);
    }
  };
  </script>
