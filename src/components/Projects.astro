---
// Import types and utilities
import type { Project } from '@/types';

// Debug environment variables
console.log('Environment in Projects.astro:', {
  PUBLIC_SUPABASE_URL: import.meta.env.PUBLIC_SUPABASE_URL,
  PUBLIC_SITE_URL: import.meta.env.PUBLIC_SITE_URL,
  MODE: import.meta.env.MODE,
  NODE_ENV: import.meta.env.MODE // In Astro, use MODE instead of NODE_ENV
});

// Define the API response type
interface ProjectsApiResponse {
  success: boolean;
  data: Project[];
  error?: string;
}

// Initialize empty projects array with proper typing
let projects: Project[] = [];
let categories: string[] = [];

// Function to safely fetch projects
async function fetchProjects(): Promise<void> {
  try {
    // Get the base URL - in production use the actual domain, in dev use localhost
    let baseUrl = import.meta.env.PUBLIC_SITE_URL || '';
    
    // If we're in production and PUBLIC_SITE_URL is localhost, use the actual Vercel URL
    if (import.meta.env.MODE === 'production' && baseUrl.includes('localhost')) {
      baseUrl = 'https://sebastian-montandon.vercel.app';
    }
    
    const apiPath = '/api/projects';
    const apiUrl = baseUrl ? new URL(apiPath, baseUrl).toString() : apiPath;
    
    console.log('Fetching projects from:', apiUrl);
    
    // A√±adir timestamp √∫nico para evitar cach√©
    const timestamp = new Date().getTime();
    const urlWithTimestamp = `${apiUrl}${apiUrl.includes('?') ? '&' : '?'}_t=${timestamp}`;
    
    const response = await fetch(urlWithTimestamp, {
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      },
      cache: 'no-store' // Asegura que no se use la cach√©
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, ${errorText}`);
    }
    
    const result: ProjectsApiResponse = await response.json();
    
    if (result.success && Array.isArray(result.data)) {
      projects = result.data;
      
      // Get unique categories for filtering
      categories = [...new Set(
        result.data
          .map(p => p.category)
          .filter((c): c is string => Boolean(c))
          .sort()
      )];
      
      console.log(`Successfully loaded ${projects.length} projects with ${categories.length} categories`);
    } else {
      const errorMessage = result.error || 'Unknown error';
      console.error('Failed to load projects:', errorMessage);
      throw new Error(`API Error: ${errorMessage}`);
    }
  } catch (error) {
    console.error('Error in fetchProjects:', error);
    // Re-throw to be caught by the error boundary
    throw error;
  }
}

// Fetch projects on the server side
try {
  await fetchProjects();
} catch (error) {
  console.error('Failed to fetch projects:', error);
  // Initialize with empty arrays to prevent runtime errors
  projects = [];
  categories = [];
}

// Function to safely truncate description
const truncate = (str: string = '', maxLength: number): string => 
  str.length > maxLength ? `${str.substring(0, maxLength)}...` : str;
---

<section id="projects" class="section bg-dark-800/95 relative overflow-hidden py-20">
  <div class="absolute inset-0 overflow-hidden opacity-10">
    <div class="absolute -top-1/2 -left-1/4 w-[800px] h-[800px] bg-primary-500/20 rounded-full filter blur-3xl"></div>
    <div class="absolute -bottom-1/4 -right-1/4 w-[600px] h-[600px] bg-primary-400/15 rounded-full filter blur-3xl"></div>
  </div>
  
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center mb-16" data-aos="fade-up">
      <span class="text-primary-400 font-mono text-sm tracking-wider">MY WORK</span>
      <h2 class="text-4xl md:text-5xl font-bold mt-3 mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
        Featured <span class="text-primary-400">Projects</span>
      </h2>
      <div class="w-20 h-1 bg-gradient-to-r from-primary-500 to-primary-300 mx-auto rounded-full"></div>
    </div>
    
    <!-- Projects Filter -->
    {categories.length > 0 && (
      <div class="flex flex-wrap justify-center gap-3 mb-10" data-aos="fade-up" data-aos-delay="100">
        <button 
          type="button"
          class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300
                 bg-primary-500/10 text-primary-400 hover:bg-primary-500/20"
          data-category="all"
        >
          All Projects
        </button>
        {categories.map(category => (
          <button
            type="button"
            class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300
                   bg-dark-700 hover:bg-dark-600 text-gray-300"
            data-category={category}
          >
            {category}
          </button>
        ))}
      </div>
    )}
    
    <!-- Projects Container -->
    <!-- Projects Grid -->
    <div id="projects-container" class="projects-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {projects.map((project, index) => {
        const projectCategory = project.category || 'uncategorized';
        
        return (
          <div 
            id={`project-${project.id}`}
            class="group relative overflow-hidden rounded-xl bg-dark-700/50 backdrop-blur-sm border border-dark-600/50 transition-all duration-300 ease-out hover:border-primary-500/30 hover:shadow-lg hover:shadow-primary-500/10 hover:-translate-y-2 hover:scale-[1.02] project-item"
            data-category={projectCategory}
            data-id={project.id}
          >
            {/* Project Image */}
            <div class="relative overflow-hidden h-56 bg-dark-800">
              {project.image_url ? (
                <img
                  src={project.image_url}
                  alt={project.title}
                  class="w-full h-full object-cover transition-transform duration-700 ease-out group-hover:scale-110"
                  loading="lazy"
                />
              ) : (
                <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-dark-800 to-dark-900">
                  <span class="text-4xl">üìÅ</span>
                </div>
              )}
              
              {/* Hover Overlay */}
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 ease-out flex items-end p-6">
                <div class="translate-y-4 group-hover:translate-y-0 transition-transform duration-300 ease-out">
                  <h3 class="text-xl font-bold text-white mb-2">{project.title}</h3>
                  <div class="flex flex-wrap gap-2 mb-3">
                    {project.technologies?.slice(0, 3).map(tech => (
                      <span class="px-2 py-1 text-xs bg-primary-500/10 text-primary-400 rounded">
                        {tech}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Project Content */}
            <div class="p-6">
              <h3 class="text-xl font-bold text-white mb-2 group-hover:text-primary-400 transition-colors duration-300 ease-out">
                {project.title}
              </h3>
              
              <p class="text-gray-400 mb-4 line-clamp-3">
                {truncate(project.description, 120)}
              </p>
              
              <div class="flex items-center justify-between pt-4 border-t border-dark-600">
                <div class="flex gap-2">
                  {project.github_url && (
                    <a 
                      href={project.github_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-400 hover:text-white transition-colors duration-200 ease-out hover:scale-110"
                      aria-label="View on GitHub"
                    >
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                        <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
                      </svg>
                    </a>
                  )}
                  
                  {project.live_url && (
                    <a 
                      href={project.live_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-400 hover:text-white transition-colors duration-200 ease-out hover:scale-110"
                      aria-label="View Live Demo"
                    >
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                      </svg>
                    </a>
                  )}
                </div>
                
                {project.category && (
                  <span class="px-3 py-1 text-xs font-medium rounded-full bg-dark-600 text-gray-300">
                    {project.category}
                  </span>
                )}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
  
  <!-- Client-side Script for filtering -->
  <script>
    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Initializing project filters...');
      
      // Get DOM elements with proper TypeScript types - be more specific to avoid conflicts
      const filterButtons = document.querySelectorAll('.filter-btn[data-category]');
      const projectItems = document.querySelectorAll('#projects-container > div[data-category]');
      
      console.log(`Found ${filterButtons.length} filter buttons and ${projectItems.length} projects`);
      
      // Add basic styles to prevent scroll and animations during filtering
      const addBasicStyles = () => {
        const style = document.createElement('style');
        style.textContent = `
          .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
          }
          .project-hidden {
            display: none !important;
          }
          .project-visible {
            display: block !important;
          }
          .filter-btn {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            touch-action: manipulation;
          }
          .filter-btn:focus {
            outline: none;
            box-shadow: none;
          }
          .filter-btn:active {
            transform: none;
          }
          /* Ensure no smooth scrolling during filtering */
          .filtering-active {
            scroll-behavior: auto !important;
          }
        `;
        document.head.appendChild(style);
      };
      
      // No scroll function needed - categories filter in place without movement

      // Function to filter projects without any scroll behavior
      const filterProjects = (category: string) => {
        console.log(`Filtering projects by category: ${category}`);
        
        // Store current scroll position to prevent any movement
        const currentScrollY = window.scrollY;
        
        // Update active state for buttons
        filterButtons.forEach(btn => {
          if (!btn) return;
          const btnElement = btn as HTMLElement;
          const isActive = btnElement.getAttribute('data-category') === category;
          
          // Remove all previous classes
          btnElement.classList.remove('bg-primary-500/10', 'text-primary-400', 'bg-dark-700', 'text-gray-300', 'hover:bg-primary-500/20', 'hover:bg-dark-600');
          
          if (isActive) {
            btnElement.classList.add('bg-primary-500/10', 'text-primary-400', 'hover:bg-primary-500/20');
          } else {
            btnElement.classList.add('bg-dark-700', 'text-gray-300', 'hover:bg-dark-600');
          }
        });
        
        // Filter projects instantly - no animations, no scroll
        let visibleCount = 0;
        
        projectItems.forEach(project => {
          if (!project) return;
          
          const projectElement = project as HTMLElement;
          const projectCategory = projectElement.getAttribute('data-category');
          const shouldShow = category === 'all' || projectCategory === category;
          
          // Clear any existing animation classes
          projectElement.classList.remove('project-filtering-in', 'project-filtering-out');
          
          if (shouldShow) {
            projectElement.classList.remove('project-hidden');
            projectElement.classList.add('project-visible');
            visibleCount++;
          } else {
            projectElement.classList.remove('project-visible');
            projectElement.classList.add('project-hidden');
          }
        });
        
        // Force scroll position to remain exactly the same
        window.scrollTo(0, currentScrollY);
        
        console.log(`Showing ${visibleCount} projects for category: ${category}`);
      };
      
      // Initialize
      addBasicStyles();
      
      // Initialize immediately without any timeout
      // Initialize visibility without scrolling
      projectItems.forEach(project => {
        if (!project) return;
        const projectElement = project as HTMLElement;
        projectElement.classList.remove('project-hidden');
        projectElement.classList.add('project-visible');
      });
      
      // Set "All Projects" as active button
      filterButtons.forEach(btn => {
        if (!btn) return;
        const btnElement = btn as HTMLElement;
        const isActive = btnElement.getAttribute('data-category') === 'all';
        
        btnElement.classList.remove('bg-primary-500/10', 'text-primary-400', 'bg-dark-700', 'text-gray-300', 'hover:bg-primary-500/20', 'hover:bg-dark-600');
        
        if (isActive) {
          btnElement.classList.add('bg-primary-500/10', 'text-primary-400', 'hover:bg-primary-500/20');
        } else {
          btnElement.classList.add('bg-dark-700', 'text-gray-300', 'hover:bg-dark-600');
        }
      });
      
      console.log('Projects initialized immediately');
      
      // Set up filter button click handlers
      filterButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          // Prevent all default behaviors that could cause scrolling
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          
          const category = button.getAttribute('data-category') || 'all';
          
          // Add filtering class to disable smooth scrolling
          document.documentElement.classList.add('filtering-active');
          
          // Disable scroll restoration temporarily
          const originalScrollBehavior = document.documentElement.style.scrollBehavior;
          document.documentElement.style.scrollBehavior = 'auto';
          
          // Filter projects immediately without any delays
          filterProjects(category);
          
          // Clean up after filtering is complete
          setTimeout(() => {
            document.documentElement.style.scrollBehavior = originalScrollBehavior;
            document.documentElement.classList.remove('filtering-active');
          }, 50);
          
          return false;
        });
        
        // Also prevent mousedown and mouseup events that might cause unwanted behavior
        button.addEventListener('mousedown', (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
        
        button.addEventListener('mouseup', (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
        
        // Prevent any focus events that might cause scrolling
        button.addEventListener('focus', (e) => {
          e.preventDefault();
        });
      });
      
      // Prevent project links from interfering with filtering
      const projectLinks = document.querySelectorAll('#projects-container a');
      projectLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          // Stop propagation to prevent triggering filter events
          e.stopPropagation();
          // Let the link navigate normally
        });
      });
      
      // Debug: Log all project categories
      projectItems.forEach((project, index) => {
        const category = project.getAttribute('data-category');
        console.log(`Project ${index + 1}: category = "${category}"`);
      });
    });
  </script>
</section>